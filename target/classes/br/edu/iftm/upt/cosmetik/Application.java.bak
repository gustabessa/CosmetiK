package br.edu.iftm.upt.cosmetik;

import java.util.ArrayList;

import org.apache.catalina.Context;
import org.apache.catalina.connector.Connector;
import org.apache.tomcat.util.descriptor.web.SecurityCollection;
import org.apache.tomcat.util.descriptor.web.SecurityConstraint;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;
import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
import org.springframework.context.annotation.Bean;

@SpringBootApplication
public class Application {

	private static final Logger logger = LoggerFactory.getLogger(Application.class);

	public static void main(String[] args) {
//		ArrayList<String> teste = new ArrayList<String>();
//		Thread t1 = new Thread(() -> {
//			try {
//				Thread.sleep(1000);
//				teste.add("1");
//			} catch (InterruptedException e) {
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}
//		});
//		Thread t2 = new Thread(() -> {
//			teste.add("2");
//		});
//		Thread t3 = new Thread(() -> {
//			teste.add("3");
//		});
//		Thread t4 = new Thread(() -> {
//			teste.add("4");
//		});
//		
//		
//		t1.run();
//		t2.run();
//		t3.run();
//		t4.run();
//		try {
//			t1.join();
//			t2.join();
//			t3.join();
//			t4.join();			
//		} catch (Exception e) {
//		}
//		
//		System.out.println(teste);
		logger.info(">>>> Iniciando a execucao da aplicacao");
		SpringApplication.run(Application.class, args);
		logger.info(">>>> Aplicacao inicializada");
	}

	@Bean
	public ServletWebServerFactory servletContainer() {
		TomcatServletWebServerFactory tomcat = new TomcatServletWebServerFactory() {
			@Override
			protected void postProcessContext(Context context) {
				SecurityConstraint securityConstraint = new SecurityConstraint();
				securityConstraint.setUserConstraint("CONFIDENTIAL");
				SecurityCollection collection = new SecurityCollection();
				collection.addPattern("/*");
				securityConstraint.addCollection(collection);
				context.addConstraint(securityConstraint);
			}
		};
		tomcat.addAdditionalTomcatConnectors(redirectConnector());
		return tomcat;
	}

	private Connector redirectConnector() {
		Connector connector = new Connector(TomcatServletWebServerFactory.DEFAULT_PROTOCOL);
		connector.setScheme("http");
		connector.setPort(8080);
		connector.setSecure(false);
		connector.setRedirectPort(8443);
		return connector;
	}
}